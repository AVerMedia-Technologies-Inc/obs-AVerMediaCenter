#define MyAppName "@CMAKE_PROJECT_NAME@"
#define MyAppDisplayName "AVerMedia @PLUGIN_DISPLAY_NAME@"
#define MyAppVersion "@CMAKE_PROJECT_VERSION@"
#define MyAppPublisher "@PLUGIN_AUTHOR@"
#define MyAppURL "@PLUGIN_WEBSITE@"
#define MyAppFolder "AVerMediaObsPlugins"
#define MyAppID "{@UUID_APP@}"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{@UUID_APP@}
; Note: Inno Setup seems to append the last '}' to uninstaller
AppName={#MyAppDisplayName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={code:GetDirName}
DefaultGroupName={#MyAppDisplayName}
OutputBaseFilename={#MyAppName}-{#MyAppVersion}-Windows-Installer
Compression=lzma
SolidCompression=yes
DirExistsWarning=no
SetupLogging=yes
PrivilegesRequired=admin
AppCopyright=Copyright (C) 2024 AVerMedia Technologies, Inc.
WizardStyle=classic
VersionInfoVersion={#MyAppVersion}
UsedUserAreasWarning=no
SetupIconFile=..\sdk\ap_32.ico
UninstallDisplayIcon={app}\data\obs-plugins\{#MyAppName}\ap_32.ico
DisableDirPage=no

[Languages]
Name: "en_US"; MessagesFile: "compiler:Default.isl,..\i18n\en_US.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
Name: "zh_TW"; MessagesFile: "compiler:Languages\ChineseTraditional.isl,..\i18n\zh_TW.isl"; LicenseFile: "..\i18n\zh-Hant.lproj\LICENSE.txt";
;Name: "cs_CZ"; MessagesFile: "compiler:Languages\Czech.isl,..\i18n\cs_CZ.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
Name: "de_DE"; MessagesFile: "compiler:Languages\German.isl,..\i18n\de_DE.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
Name: "es_ES"; MessagesFile: "compiler:Languages\Spanish.isl,..\i18n\es_ES.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
;Name: "it_IT"; MessagesFile: "compiler:Languages\Italian.isl,..\i18n\it_IT.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
Name: "ru_RU"; MessagesFile: "compiler:Languages\Russian.isl,..\i18n\ru_RU.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
Name: "fr_FR"; MessagesFile: "compiler:Languages\French.isl,..\i18n\fr_FR.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
Name: "ja_JP"; MessagesFile: "compiler:Languages\Japanese.isl,..\i18n\ja_JP.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
Name: "ko_KR"; MessagesFile: "compiler:Languages\Korean.isl,..\i18n\ko_KR.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
Name: "zh_CN"; MessagesFile: "compiler:Languages\ChineseSimplified.isl,..\i18n\zh_CN.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
;Name: "pl_PL"; MessagesFile: "compiler:Languages\Polish.isl,..\i18n\pl_PL.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
;Name: "nl_NL"; MessagesFile: "compiler:Languages\Dutch.isl,..\i18n\nl_NL.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
Name: "th_TH"; MessagesFile: "compiler:Languages\Thai.isl,..\i18n\th_TH.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";
;Name: "pt_BR"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl,..\i18n\pt_BR.isl"; LicenseFile: "..\i18n\en.lproj\LICENSE.txt";

[Files]
Source: "..\release\Package\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\LICENSE"; Flags: dontcopy

[Dirs]
Name: "{userappdata}\{#MyAppFolder}"

[Registry]
; write to the registry on a 64-bit machine
; https://stackoverflow.com/a/12958439
Root: HKLM64; Subkey: "SOFTWARE\AVerMedia"; Flags: createvalueifdoesntexist; Check: IsWin64
Root: HKLM64; Subkey: "SOFTWARE\AVerMedia\OBS_Plugins"; Flags: createvalueifdoesntexist; Check: IsWin64
Root: HKLM64; Subkey: "SOFTWARE\AVerMedia\OBS_Plugins\{#MyAppName}"; Flags: createvalueifdoesntexist uninsdeletekey; Check: IsWin64
Root: HKLM64; Subkey: "SOFTWARE\AVerMedia\OBS_Plugins\{#MyAppName}"; ValueType: string; ValueName: "Path"; ValueData: "{app}"; Check: IsWin64
Root: HKLM64; Subkey: "SOFTWARE\AVerMedia\OBS_Plugins\{#MyAppName}"; ValueType: string; ValueName: "Language"; ValueData: "{language}"; Check: IsWin64
Root: HKLM64; Subkey: "SOFTWARE\AVerMedia\OBS_Plugins\{#MyAppName}"; ValueType: string; ValueName: "Uninstaller"; ValueData: "{uninstallexe}"; Check: IsWin64
Root: HKLM64; Subkey: "SOFTWARE\AVerMedia\OBS_Plugins\{#MyAppName}"; ValueType: string; ValueName: "Version"; ValueData: "{#MyAppVersion}"; Check: IsWin64
Root: HKLM64; Subkey: "SOFTWARE\AVerMedia\OBS_Plugins\{#MyAppName}"; ValueType: string; ValueName: "DisplayName"; ValueData: "{#MyAppDisplayName}"; Check: IsWin64
Root: HKLM64; Subkey: "SOFTWARE\AVerMedia\OBS_Plugins\{#MyAppName}"; ValueType: string; ValueName: "FilePath"; ValueData: "{app}\obs-plugins\64bit\{#MyAppName}.dll"; Check: IsWin64
Root: HKLM64; Subkey: "SOFTWARE\AVerMedia\OBS_Plugins\{#MyAppName}"; ValueType: string; ValueName: "DataPath"; ValueData: "{userappdata}\{#MyAppFolder}"; Check: IsWin64

; How to delete folder during uninstallation process?
; https://stackoverflow.com/a/13544329
[UninstallDelete]
Type: filesandordirs; Name: "{group}"

[InstallDelete]
; delete v1.0.24 Startup Menu entry
Type: filesandordirs; Name: "{group}"

[Code]

const
  // OBS Studio version
  MinimumMajor = @PLUGIN_MIN_OBS_MAJOR@;
  MinimumMinor = @PLUGIN_MIN_OBS_MINOR@;
  MinimumPatch = @PLUGIN_MIN_OBS_PATCH@;
  MinimumBuild = 0; // reserved. @PLUGIN_MIN_OBS_BUILD@

procedure InitializeWizard();
var
  GPLText: AnsiString;
  Page: TOutputMsgMemoWizardPage;
begin
  // OBS GPL license in Welcome page
  ExtractTemporaryFile('LICENSE');
  LoadStringFromFile(ExpandConstant('{tmp}\LICENSE'), GPLText);
  Page := CreateOutputMsgMemoPage(wpWelcome,
    ExpandConstant('{cm:GPL_LicenseInformation}'), ExpandConstant('{cm:GPL_ReviewLicense,{#MyAppDisplayName}}'),
    ExpandConstant('{cm:GPL_LicenseInfoDesc}'),
    String(GPLText)
  );

  PageFromID(wpLicense).Description := ExpandConstant('{cm:LicenseLabel1,{#MyAppDisplayName}}');
  // How to change default choice in License agreement in INNO Setup
  // https://stackoverflow.com/a/51291566/21177210
  WizardForm.LicenseAcceptedRadio.Checked := True;
end;

// Set minimal version requirement
// https://stackoverflow.com/a/29556633
function MyGetVersionNumbersString(
  const Filename: string; var Version: string): Boolean;
var
  MS, LS: Cardinal;
  Major, Minor, Patch, Build: Cardinal;
begin
  Result := GetVersionNumbers(Filename, MS, LS);

  if Result then
  begin
    Major := MS shr 16;
    Minor := MS and $FFFF;
    Patch := LS shr 16;
    Build := LS and $FFFF;
    Version := Format('%d.%d.%d', [Major, Minor, Patch]);
    Log('File version: ' + Version);

    if (Major > MinimumMajor) or
       ((Major = MinimumMajor) and (Minor > MinimumMinor)) or
       ((Major = MinimumMajor) and (Minor = MinimumMinor) and (Patch > MinimumPatch)) or
       ((Major = MinimumMajor) and (Minor = MinimumMinor) and (Patch = MinimumPatch) and (Build >= MinimumBuild)) then
    begin
      // File version is at least the minimum required version
      Log(Format('We need at least %d.%d.%d to work.', [MinimumMajor, MinimumMinor, MinimumPatch]));
    end
    else
    begin
      // File version is lower than the minimum required version
      Log(Format('Your version is lower than %d.%d.%d', [MinimumMajor, MinimumMinor, MinimumPatch]));
      Result := False;
    end;
  end
end;

// credit where it's due :
// following function come from https://github.com/Xaymar/obs-studio_amf-encoder-plugin/blob/master/%23Resources/Installer.in.iss#L45
function GetDirName(Value: string): string;
var
  InstallPath: string;
begin
  // initialize default path, which will be returned when the following registry
  // key queries fail due to missing keys or for some different reason
  Result := '{autopf}\obs-studio';
  // query the first registry value; if this succeeds, return the obtained value
  if RegQueryStringValue(HKLM32, 'SOFTWARE\OBS Studio', '', InstallPath) then
    Result := InstallPath
end;

function SelectDirCheck(): Boolean;
var
  Obs_Installed_Path: string;
  ObsVersion: string;
begin
  Obs_Installed_Path := ExpandConstant('{app}\bin\64bit\obs64.exe');
  Log('Locate ' + Obs_Installed_Path);
  if not FileExists(Obs_Installed_Path) then begin
    MsgBox('YourApp does not seem to be installed in that folder. Please select the correct folder.', mbError, MB_OK);
    Result := False;
    exit;
  end;
  Log('Check ' + Obs_Installed_Path);

  if ((MinimumMajor > 0) or (MinimumMinor > 0) and (MinimumPatch > 0)) then begin
    if not MyGetVersionNumbersString(Obs_Installed_Path, ObsVersion) then begin
      MsgBox(ObsVersion + ' is too low. Please update OBS to the latest version.', mbCriticalError, MB_OK);
      Result := False;
      exit;
    end;
    //Log(ObsVersion);
  end;

  Result := True;
end;

function WriteGaToIni(): Boolean;
begin
  SetIniBool('GA', 'enabled', False, ExpandConstant('{userappdata}\{#MyAppFolder}\ga.ini'));
  Result := True;
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  case CurPageID of
    wpSelectDir: Result := SelectDirCheck();
    wpReady: Result := WriteGaToIni();
    else
      Result := True;
  end;
end;

// How to force InnoSetup to create an uninstall log file
// https://stackoverflow.com/a/34538367
procedure AppendStringToRegValue(const RootKey: integer; const SubKeyName, ValueName, StringToAppend: string);
var
  OldValue: string;
  NewValue: string;
  RootKeyString: string;
begin
  case RootKey of
    HKLM:
      RootKeyString := 'HKLM';
    HKCU:
      RootKeyString := 'HKCU';
  else
    RootKeyString := 'RootKey ' + IntToStr(RootKey);
  end;

  if RegQueryStringValue( RootKey, SubKeyName, ValueName, OldValue ) then
  begin
    NewValue := OldValue + StringToAppend
    if RegWriteStringValue( RootKey, SubKeyName, ValueName, NewValue ) then
      Log('Updated ' + RootKeyString + '\' + SubKeyName + '\' + ValueName + '. New Value = [' + NewValue + '].')
    else
      Log('Could not write to ' + RootKeyString + '\' + SubKeyName + '\' + ValueName + '. Value remains [' + OldValue + '].' )
  end
  else
    Log('Could not read from ' + RootKeyString + '\' + SubKeyName + '\' + ValueName + '.' );
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  UninstallSubKeyName:  string;
begin
  if CurStep = ssPostInstall then
  begin
    { Modify uninstall registry entries to add "/log" parameter for uninstall }
    UninstallSubKeyName  := 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#MyAppID}_is1'
    AppendStringToRegValue(HKLM, UninstallSubKeyName, 'UninstallString', ' /log')
    AppendStringToRegValue(HKLM, UninstallSubKeyName, 'QuietUninstallString', ' /log')

    // OPFSC-731: legacy bug. extra trailing '}'
    RegDeleteKeyIncludingSubkeys(HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#MyAppID}}_is1');
  end;
end;

// How to check with Inno Setup, if a process is running
// https://stackoverflow.com/a/9950718
function IsAppRunning(const FileName : string): Boolean;
var
    FSWbemLocator: Variant;
    FWMIService   : Variant;
    FWbemObjectSet: Variant;
begin
    Result := false;
    FSWbemLocator := CreateOleObject('WBEMScripting.SWBEMLocator');
    FWMIService := FSWbemLocator.ConnectServer('', 'root\CIMV2', '', '');
    FWbemObjectSet :=
      FWMIService.ExecQuery(
        Format('SELECT Name FROM Win32_Process Where Name="%s"', [FileName]));
    Result := (FWbemObjectSet.Count > 0);
    FWbemObjectSet := Unassigned;
    FWMIService := Unassigned;
    FSWbemLocator := Unassigned;
end;

// Inno Setup Kill a running process
// https://stackoverflow.com/a/24014649
procedure CloseApp(AppName: String);
var
  WbemLocator : Variant;
  WMIService   : Variant;
  WbemObjectSet: Variant;
  WbemObject   : Variant;
begin;
  WbemLocator := CreateOleObject('WbemScripting.SWbemLocator');
  WMIService := WbemLocator.ConnectServer('localhost', 'root\CIMV2');
  WbemObjectSet := WMIService.ExecQuery('SELECT * FROM Win32_Process Where Name="' + AppName + '"');
  if not VarIsNull(WbemObjectSet) and (WbemObjectSet.Count > 0) then
  begin
    WbemObject := WbemObjectSet.ItemIndex(0);
    if not VarIsNull(WbemObject) then
    begin
      WbemObject.Terminate();
      WbemObject := Unassigned;
    end;
  end;
end;

function InitializeUninstall(): Boolean;
var
  Answer: Integer;
begin
  Log('InitializeUninstall');
  if IsAppRunning('obs64.exe') then
  begin
    Log('obs64.exe is running');
    Answer := MsgBox(FmtMessage(SetupMessage(msgUninstallAppRunningError), ['OBS Studio']), mbError, MB_OKCANCEL);
	if Answer = IDCANCEL then
    begin
      Log('User chose not to close obs.');
      Result := False;
      Exit;
    end;
    CloseApp('obs64.exe');
  end;
  // check again
  if IsAppRunning('obs64.exe') then begin
    Result := False;
    Log('obs64.exe still running... Abort.');
    MsgBox(SetupMessage(msgErrorCloseApplications), mbError, MB_OK);
  end else begin
    Result := True;
  end

end;

// Inno Setup: How do I see the output (translation) of the Inno Setup Preprocessor?
// https://stackoverflow.com/a/3328474
#expr SaveToFile(AddBackslash(SourcePath) + "installer-preprocessed.iss")
